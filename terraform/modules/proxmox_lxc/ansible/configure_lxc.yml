---
- name: Wait for hosts to be reachable
  hosts: all
  gather_facts: false
  pre_tasks:
    - name: Wait for SSH
      ansible.builtin.wait_for_connection:

- name: Configure LXC containers
  hosts: all
  tasks:
    - name: Ping the host
      ansible.builtin.ping:

    - name: Set timzone
      community.general.timezone:
        name: "{{ system_timezone | default('Europe/Helsinki') }}"
      notify: reboot server

    - name: Enable IPv4 forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "1"
        state: present
        reload: true
      notify: reboot server

    - name: Enable IPv6 forwarding
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "1"
        state: present
        reload: true
      notify: reboot server

    - name: Enable IPv6 router advertisements
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.accept_ra
        value: "2"
        state: present
        reload: true
      notify: reboot server

    - name: Add br_netfilter to /etc/modules-load.d/
      ansible.builtin.copy:
        content: br_netfilter
        dest: /etc/modules-load.d/br_netfilter.conf
        mode: u=rw,g=,o=
      when: ansible_os_family == "RedHat"
      notify: reboot server

    - name: Load br_netfilter
      community.general.modprobe:
        name: br_netfilter
        state: present
      when: ansible_os_family == "RedHat"
      notify: reboot server

    - name: Set bridge-nf-call-iptables (just to be sure)
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: true
      when: ansible_os_family == "RedHat"
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
      notify: reboot server

    - name: Add /usr/local/bin to sudo secure_path
      ansible.builtin.lineinfile:
        line: Defaults    secure_path = {{ secure_path[ansible_os_family] }}
        regexp: Defaults(\s)*secure_path(\s)*=
        state: present
        insertafter: EOF
        path: /etc/sudoers
        validate: visudo -cf %s
      when: ansible_os_family in ["RedHat", "Suse"]
      notify: reboot server

    - name: Install packages
      ansible.builtin.package:
        name: curl
        state: present
        update_cache: true

    - name: Create conf-kmsg.sh file
      ansible.builtin.template:
        src: conf-kmsg.sh.j2
        dest: /usr/local/bin/conf-kmsg.sh
        owner: root
        group: root
        mode: "0755"

    - name: Create service conf
      ansible.builtin.template:
        src: conf-kmsg.service.j2
        dest: /etc/systemd/system/conf-kmsg.service
        owner: root
        group: root
        mode: '0755'

    - name: Enable conf-kmsg service
      ansible.builtin.service:
        name: conf-kmsg
        enabled: true
        state: started
      notify: reboot server

  handlers:
    - name: Reboot server
      become: true
      ansible.builtin.reboot:
      listen: reboot server

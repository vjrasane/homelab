---
- name: Set is_first_server fact
  ansible.builtin.set_fact:
    is_first_server: "{{ ansible_hostname == hostvars[groups['server'][0]]['ansible_hostname'] }}"

- name: "Check if k3s is installed"
  ansible.builtin.stat:
    path: /etc/rancher/k3s/k3s.yaml
  register: k3s_installed

- name: Uninstall previous k3s
  ansible.builtin.command:
    cmd: /usr/local/bin/k3s-uninstall.sh
    removes: /usr/local/bin/k3s-uninstall.sh
  when:
    - k3s_installed.stat.exists
    - reinstall | default(false) | bool

- name: Install k3s on master server
  ansible.builtin.include_tasks: install_k3s_master.yml
  when:
    - is_first_server
    - not k3s_installed.stat.exists
    - not (reinstall | default(false) | bool)

- name: Read k3s token from master
  ansible.builtin.slurp:
    src: /var/lib/rancher/k3s/server/token
  register: read_k3s_token
  when: is_first_server

- name: Store k3s token
  ansible.builtin.set_fact:
    k3s_token: "{{ read_k3s_token.content | b64decode | regex_replace('\n', '') }}"
  when: is_first_server

- name: Install k3s on sibling servers
  ansible.builtin.include_tasks: install_k3s_sibling.yml
  when:
    - not is_first_server
    - not k3s_installed.stat.exists
    - not (reinstall | default(false) | bool)

- name: Wait for k3s.yml to exist
  ansible.builtin.wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    timeout: 300
    state: present
  when: is_first_server

- name: Copy kubeconfig from first server
  ansible.builtin.fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: "{{ playbook_dir }}/../k3s-{{ inventory_hostname }}.config"
    flat: true
  when: is_first_server

- name: Replace server IP in kubeconfig with VIP
  delegate_to: localhost
  run_once: true
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../k3s-{{ inventory_hostname }}.config"
    regexp: 'https://.*:6443'
    replace: "https://{{ k3s_vip }}:6443"
